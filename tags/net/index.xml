<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>net on ShrinkLabs</title>
    <link>https://shrinklabs.com/tags/net/</link>
    <description>Recent content in net on ShrinkLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 06 Dec 2016 01:13:41 +0900</lastBuildDate><atom:link href="https://shrinklabs.com/tags/net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go코드로 HTML Form 전송</title>
      <link>https://shrinklabs.com/post/go_html-form/</link>
      <pubDate>Tue, 06 Dec 2016 01:13:41 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/go_html-form/</guid>
      <description>HTML, Javascript를 사용해서 Post방식으로 Form을 전송하는 동작을 Go 코드를 작성해 보려고 합니다.
우선 POST로 전송된 Form을 받아서 처리를 하는 서버쪽을 다음과 같은 구성을 갖는 코드로 만듭니다.
package main import { &amp;#34;net/http&amp;#34; &amp;#34;github.com/gorilla/mux&amp;#34; } func main() { r := mux.Newrouter().StrictSlash(false) r.HandleFunc(&amp;#34;/upload&amp;#34;, upload).Methods(&amp;#34;POST&amp;#34;) http.ListenAndServe(&amp;#34;:8080&amp;#34;, r) } func upload(w http.ResponseWriter, r *http.Request) { if r.Method == &amp;#34;POST&amp;#34; { } } 이렇게 &amp;ldquo;http://localhost:8080/upload&amp;rdquo; 를 통해서 POST 방식으로 전달되는 요청을 받아서 처리하기 위한 큰틀을 만들었습니다.</description>
    </item>
    
    <item>
      <title>ifconfig 사용</title>
      <link>https://shrinklabs.com/post/tool_ifconfig/</link>
      <pubDate>Thu, 21 Jul 2016 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_ifconfig/</guid>
      <description>임시로 사용할 개발환경을 만들기 위해서 ubuntu 이미지를 사용하는데,
ifconfig 명령이 동작하지 않아서 보니, net-tools가 온전하게 설치되었지가 않은것 같습니다.
$ apt-get install --reinstall net-tools    (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>http 패키지의 HandleFunc과 Handle</title>
      <link>https://shrinklabs.com/post/go_http-handlefunc-handle/</link>
      <pubDate>Sun, 17 Jul 2016 17:10:53 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/go_http-handlefunc-handle/</guid>
      <description>HandleFunc  http.ResponseWriter 와 *http.Request를 인자로 받는 함수를 전달받습니다. 내부적으로 ServeHTTP가 구현된 ServeMux를 사용합니다.  package main import ( &amp;#34;net/http&amp;#34; ) func indexHandler(w http.ResponseWriter, r *http.Request) { .... } func main() { http.HandleFunc(&amp;#34;/&amp;#34;, indexHandler) http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil) } Handle  http.Handler 인터페이스를 구현한 객체를 전달받습니다. 인자로 전달받은 객체는 http.Handler의 ServeHTTP(http.ResponseWriter, *http.Request)가 구현되어 있어야 합니다.  package main import ( &amp;#34;net/http&amp;#34; ) type indexHandler struct { } func (index *AppHandler) ServeHTTP(w http.ResponseWriter, r *http.</description>
    </item>
    
  </channel>
</rss>
