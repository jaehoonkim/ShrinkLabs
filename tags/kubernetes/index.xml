<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on ShrinkLabs</title>
    <link>https://shrinklabs.com/tags/kubernetes/</link>
    <description>Recent content in kubernetes on ShrinkLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 10 Apr 2020 16:31:48 +0900</lastBuildDate>
    
	<atom:link href="https://shrinklabs.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes에서 Private Container Registry 사용</title>
      <link>https://shrinklabs.com/posts/private-container-registry/</link>
      <pubDate>Fri, 10 Apr 2020 16:31:48 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/private-container-registry/</guid>
      <description>Kubernetes에 배포하기 위해서 Container Registry(Private)을 사용하려면, 별도의 secret을 등록해야 한다.
$ kubectl create secret docker-registry {secret} \ --docker-server={registryserver} \ --docker-username={name} \ --docker-password={password} \ --docker-email={email} \ --namespace={namespace}  namespace는 지정하지 않으면 default로 지정된다.
그리고 Container Registry로 부터 image를 받아서 사용하기 위한 yaml 파일에 다음과 같이 추가한다.
apiVersion: v1 kind: Pod metadata: name: private-reg spec: containers: - name: private-reg-container image: regcred/projectaa/private-reg:latest imagePullSecrets: - name: regcred  &amp;ldquo;imagePullSecrets&amp;rdquo; 항목을 추가하고 containers.image에서 iamgePullSecretes.name을 base로 사용한다.</description>
    </item>
    
    <item>
      <title>GCE에서 kops를 이용한 K8s 구성</title>
      <link>https://shrinklabs.com/posts/k8s-with-kops-on-gce/</link>
      <pubDate>Thu, 05 Mar 2020 21:36:13 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/k8s-with-kops-on-gce/</guid>
      <description>클러스터 배포용 VM 인스턴스 생성  Kubernetes를 구성하기 위한 VM 인스턴스를 생성한다.
 &amp;ldquo;ID 및 API 액세스&amp;rdquo; 항목에서 액세스 범위를 &amp;ldquo;모든 Cloud API에 대한 전체 액세스 허용&amp;rdquo; 으로 선택한다. 또는 아래와 같이 서비스 계정에 권한을 설정하고 서비스 계정을 선택해도 된다.
 GCP 관리 콘솔의 IAM&amp;amp;Admin에서 서비스 계정을 하나 만든다. 서비스 계정이 갖고 있어야 하는 최소한의 권한은 다음과 같다.
compute admin servce account admin service account key admin service account token creator service acount user storage admin DNS Administrator DNS Reader  SSH로 연결 &amp;amp; 업데이트</description>
    </item>
    
    <item>
      <title>10.Nginx Ingress Controller on Google Kubernetes Engine</title>
      <link>https://shrinklabs.com/posts/nginx-ingress-controller-on-google-kubernetes-engine/</link>
      <pubDate>Mon, 21 Jan 2019 17:05:30 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/nginx-ingress-controller-on-google-kubernetes-engine/</guid>
      <description>이번 과정에서는 &amp;ldquo;Ingress&amp;rdquo;에 대해서 알아 볼 수 있었다.
&amp;ldquo;Ingress&amp;rdquo;는 resource와 controller로 구성되어 있다.
resource는 &amp;ldquo;Ingress&amp;rdquo;의 동작에 대한 규칙을 정해 놓은 yaml이며,
controller는 layer7에 해당하는 로드밸런서의 역할을 제공한다. 즉 http 요청에 대한 처리와 부하 분산을 제공한다.
controller로는 gce, nginx, envoy, haproxy, istio, kong, traefik 을 이용할 수 있다.
과정에서는 &amp;ldquo;hello-app&amp;rdquo; 이라는 &amp;ldquo;Service&amp;rdquo;를 노출한다. 그리고 helm을 이용해서 nginx-ingress를 kubernetes cluster에 설치한다.
kind가 &amp;ldquo;Ingress&amp;rdquo;인 yaml 파일을 만든다. 이때 &amp;ldquo;path: /hello&amp;rdquo;로 지정하며, backend를 &amp;ldquo;serviceName: hello-app&amp;rdquo;과 &amp;ldquo;servicePort: 8080&amp;rdquo; 으로 지정을 한다.</description>
    </item>
    
    <item>
      <title>9.Helm Package Management</title>
      <link>https://shrinklabs.com/posts/helm-package-management/</link>
      <pubDate>Thu, 17 Jan 2019 15:04:00 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/helm-package-management/</guid>
      <description>이번 과정은 kubernetes에서 사용할 수 있는 패키지 관리자에 대해서 알아 볼 수 있었다.
Helm은 클라이언트 역할을 하는 helm, 서버 역할을 하는 tiller 그리고 설정 정보들의 관리를 위한 chart로 이루어져 있다.
여기에서 클라이언트(helm)라고 하는건 클러스터의 외부에서 작업을 지시하기 위한 도구이고, 실제로 클러스터 안쪽에서 동작 하는건 서버(tiller)라고 보면 된다.
helm의 설치는 간단합니다.
$ curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get &amp;gt; get_helm.sh $ chmod 700 get_helm.sh $ ./get_helm.sh  근데 이 과정 다음에 갑자기 tiller를 위한 계정을 만들고 해당 계정을 무언가에 바인딩을 한다.</description>
    </item>
    
    <item>
      <title>7.Build Slack Bot With Node.js on Kubernetes</title>
      <link>https://shrinklabs.com/posts/build-slack-bot-with-nodejs-on-kubernetes/</link>
      <pubDate>Mon, 14 Jan 2019 13:17:21 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/build-slack-bot-with-nodejs-on-kubernetes/</guid>
      <description>이번 과정은 Secret 객체에 대해서 좀 더 자세하게 알아볼 수 있는 과정이었다.
서비스를 제공하는 프로그램(node.js 코드)을 Docker image로 만든 다음 Registry Server에 Push를 한다.
제공하는 서비스에서 외부의 서비스(slack)를 사용하기 위해서 민감한 정보인 token이 존재한다. 이 내용이 코드상 또는 image 상에 존재하지 않게 Image를 만들고자 한다.
그래서 별도로 &amp;ldquo;slack-token&amp;rdquo; 파일을 만들어서 파일을 통해서 token 정보를 제공하도록 만들어 놓았다. 해당 파일을 경로와 파일명을 포함해서 환경변수 &amp;ldquo;slack_token_path&amp;rdquo;에 등록해 놓고, 코드상에서는 환경 변수인 &amp;ldquo;slack_token_path&amp;rdquo;에 지정되어 있는 경로의 파일로 부터 token 정보를 읽어서 사용한다.</description>
    </item>
    
    <item>
      <title>5.Continuous Delivery With Jenkins in Kubernetes Engine</title>
      <link>https://shrinklabs.com/posts/continuous-delivery-with-jenkins-in-kubernetes-engine/</link>
      <pubDate>Thu, 10 Jan 2019 11:40:50 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/continuous-delivery-with-jenkins-in-kubernetes-engine/</guid>
      <description>이번 과정은 Jenkins와 Kubernetes를 이용한 배포 자동화를 실습해 볼 수 있었다.
분량은 많지만 이해가 어렵지는 않은 내용이었다.
실습을 해보면서 Namespace라는 객체와 Helm이라는 패키지 관리 도구를 사용해 볼 수 있다. Namespace는 일반적으로 우리가 알고 있는 용도인데, 논리적으로 무언가를 구분지어서 사용하고 싶을때 사용하는게 목적이라고 보면 될 것 같다.
이전 과정에서 배웠던 배포를 위한 전략에서는 label을 사용했었다면, 이번에는 Namespace를 사용해서 비슷한 문제 상황을 해결하는걸 경험해 볼 수 있다.
그리고 helm은 Kubernetes의 클러스터에 올라갈 수 있도록 미리 정의해서 배포해 놓은걸 사용할 수 있게 해주는 도구였다.</description>
    </item>
    
    <item>
      <title>2.Hello Node Kubernetes</title>
      <link>https://shrinklabs.com/posts/hello-node-kubernetes/</link>
      <pubDate>Tue, 08 Jan 2019 13:13:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/hello-node-kubernetes/</guid>
      <description>2번째 과정에서는 Kubernetes의 기본적인 동작 방식에 대해서 알아 볼 수 있었다.
Kubernetes의 클러스터를 생성하는 과정은 Google Cloud Platform에서 기능을 제공하고 있어서 아주 간편했다.
책을 보면서 Kubernetes 공부를 처음 시작하는 과정에서 가장 시간을 많이 소비하게 되는 부분이었는데, 플랫폼에서 제공되는 기능을 glcoud를 이용해서 node와 각 node의 기본적인 설정을 지정후 cluster를 생성하는 명령 하나로 모든 과정이 생략될 수 있게 되었다.
그리고 Registry Server에 등록해 놓았던 Image를 이용해서 직접 &amp;ldquo;Pod&amp;rdquo;를 만들어보고, &amp;ldquo;Pod&amp;rdquo;의 개념과 &amp;ldquo;Deployment&amp;rdquo;의 개념이 무엇인지에 대해서 대략적으로 알아 볼 수 있었다.</description>
    </item>
    
  </channel>
</rss>