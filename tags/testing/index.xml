<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on ShrinkLabs</title>
    <link>https://shrinklabs.com/tags/testing/</link>
    <description>Recent content in testing on ShrinkLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 21 Feb 2018 23:02:29 +0900</lastBuildDate><atom:link href="https://shrinklabs.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go언어 프로젝트에서 테스트 코드 작성 경험</title>
      <link>https://shrinklabs.com/post/go_writing-a-unit-test/</link>
      <pubDate>Wed, 21 Feb 2018 23:02:29 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/go_writing-a-unit-test/</guid>
      <description>테스트 코드는 왜? 현재 프로젝트를 진행 중 코딩을 할 때면 계속해서 의심과 두려움이 들었다.
&amp;ldquo;내가 제대로 작성하고 있는 게 맞나?&amp;rdquo;
&amp;ldquo;이렇게 작성하면 다른 데에서 문제가 생기는 건 아닌가?&amp;rdquo;
그리고 이런 걱정들은 다음의 2가지 원인 때문이지 않을까 라고 생각하게 되었다.
첫 번째, 코드 작성 후 실행해서 결과를 확인하기 위해서 개인 개발 환경을 MessageQueue와 내가 보낸 요청에 대해 기대하는 응답을 전달해줄 MessageQueue 반대편의 모듈을 구성하기가 쉽지 않다는 것이었다.
두 번째, 기존에 코딩하면서 세워 놓았던 원칙을 기억하지 못하고 그 원칙에 어긋나는 코드를 작성하게 되었을 때, 전체 시스템에서 동작 중 알 수 없는 순간에 오동작하는 경우 때문이었다.</description>
    </item>
    
    <item>
      <title>패키지 만들때 testing 패키지 사용하기</title>
      <link>https://shrinklabs.com/post/go_testing/</link>
      <pubDate>Fri, 23 Aug 2013 14:12:58 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/go_testing/</guid>
      <description>개요 Go 언어용 패키지를 만들려면, 테스트코드를 작성해야 진행이 좀 더 원활하게 되는것 같습니다.
그래서 간단하게 테스트 코드 작성하는 방법을 정리해봤습니다.
abc 패키지를 만들어서 테스트하기 src\abc\abc.go
src\abc\abc_test.go 와 같이 파일을 만들어 놓습니다.
abc.go를 다음과 같이 작성합니다.
// abc.go  package abc import ( &amp;#34;fmt&amp;#34; ) func A_Method() { fmt.Println(&amp;#34;test A Method&amp;#34;) } 그리고 abc_test.go를 다음과 같이 작성합니다.
// abc_test.go  package abc import ( &amp;#34;testing&amp;#34; ) func TestA_Method(t *testing.T) { A_Method() } 그리고 $GOPATH/src/abc/ 에서</description>
    </item>
    
  </channel>
</rss>
