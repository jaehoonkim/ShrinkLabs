<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>build on ShrinkLabs</title>
    <link>https://shrinklabs.com/tags/build/</link>
    <description>Recent content in build on ShrinkLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 May 2020 10:52:23 +0900</lastBuildDate><atom:link href="https://shrinklabs.com/tags/build/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Powershell에서 할 수 있는 Linux를 위한 빌드</title>
      <link>https://shrinklabs.com/post/go_crosscompile_on_windows/</link>
      <pubDate>Mon, 18 May 2020 10:52:23 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/go_crosscompile_on_windows/</guid>
      <description>Windows 환경에서 개발 후 Linux 환경으로 배포하기 위해서 Linux용 바이너리로 빌드가 필요할 때가 있습니다.
다음의 방법으로 빌드 할 수 있습니다.
Powershell에서 빌드하기 위한 방법은 아래와 같습니다.
PS D:\ws\src\sample&amp;gt; $env:GOOS=&amp;#34;linux&amp;#34;; go build 빌드 이후에는 필요에 따라서 &amp;ldquo;GOOS&amp;quot;를 다시 &amp;ldquo;windows&amp;quot;로 돌려 놓습니다.
   (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>core파일 만들기</title>
      <link>https://shrinklabs.com/post/go_core/</link>
      <pubDate>Tue, 01 Aug 2017 13:59:57 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/go_core/</guid>
      <description>Go언어에서도 core dump를 만드는 방법이 있었습니다.
데이브체니님이 정리해 놓은 무려 2015년도의 글 입니다.
https://dave.cheney.net/2015/11/29/a-whirlwind-tour-of-gos-runtime-environment-variables
환경변수로 GOTRACEBACK 을 crash로 설정만 해주면 됩니다.
근데 위에 처럼 환경변수 설정하고도 core 파일이 안생긴다면, 다음 블로그의 글을 참고해 보면 좋을것 같습니다.
http://lapan.tistory.com/68
블로그의 내용처럼 ulimit -a 로 확인 해보니 core file size가 0으로 되어 있습니다.
ulimit -c unlimited 로 해주었습니다.
이제 panic을 발생시켜 보면 core 파일이 잘 만들어져 있는걸 확인 할 수 있습니다.
   (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>build 옵션</title>
      <link>https://shrinklabs.com/post/go_build/</link>
      <pubDate>Thu, 25 May 2017 15:43:40 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/go_build/</guid>
      <description>소개 Go언어로 개발을 하다보면 debug모드 release모드 같이 별도의 빌드 환경을 구성하고 싶을때가 있습니다.
그래서 build 옵션으로 특정한 환경별로 결과를 달리 할 수 있는 방법에 대해서 테스트한 내용을 정리해봅니다.
빌드 go 파일들을 빌드하기 위해서는 일반적으로 다음과 같이 합니다.
$ go build Go언어 문서중에 보면 https://golang.org/pkg/go/build/#hdr-Build_Constraints[Build Constraints] 에 관한 내용이 있습니다.
이 내용은 build 할 때 조건을 줄 수 있다는 내용이고 방법은 다음과 같이 하면 된다고 합니다.
코드의 상단에 &amp;ldquo;// +build linux&amp;rdquo; 하고 한 칸을 띄우고 &amp;ldquo;package blah&amp;rdquo; 를 시작합니다.</description>
    </item>
    
  </channel>
</rss>
