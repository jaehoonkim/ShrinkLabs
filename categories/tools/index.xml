<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on ShrinkLabs</title>
    <link>https://shrinklabs.com/categories/tools/</link>
    <description>Recent content in tools on ShrinkLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 21 Aug 2018 16:34:04 +0900</lastBuildDate>
    
	<atom:link href="https://shrinklabs.com/categories/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cscope 사용(Go)</title>
      <link>https://shrinklabs.com/posts/cscope/</link>
      <pubDate>Tue, 21 Aug 2018 16:34:04 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/cscope/</guid>
      <description>Go언어 개발 환경(추가) Go언어로 작성한 코드를 분석하기 위해서 cscope가 필요할 때가 있다.
vim에서 cscope를 사용하기 위한 과정을 정리해 보려고 한다.
cscope를 설치한다. $ sudo apt-get install cscope  mkscope.sh 파일을 만든다. mkscope.sh의 내용은 다음과 같다.
이 스크립트는 https://www.cnblogs.com/shaohef/p/7358111.html 의 내용을 수정해서 사용했다.
#!/bin/bash # 기존에 존재하던 files와 out 파일을 제거한다 rm cscope.files cscope.out # $GOROOT가 존재하지 않으면 설정한다. if [&amp;quot;$GOROOT&amp;quot; = &amp;quot;&amp;quot;]; then echo &amp;quot;GOROOT is not set&amp;quot; GOROOT=`go env | grep &amp;quot;GOROOT&amp;quot; | cut -d &amp;quot;=&amp;quot; -f2` GOROOT=${GOROOT#\&amp;quot;} GOROOT=${GOROOT%\&amp;quot;} fi echo $GOROOT # Go 표준 패키지 go_src=$GOROOT/src # Go언어 표준 패키지로 제공되는 go 파일의 경로를 cscope.</description>
    </item>
    
    <item>
      <title>git push된 내용을 특정한 commit으로 되돌리기</title>
      <link>https://shrinklabs.com/posts/git-reset/</link>
      <pubDate>Tue, 31 Jul 2018 10:09:41 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/git-reset/</guid>
      <description>&amp;ldquo;iss-123&amp;rdquo; 브랜치에서 작업하던 내용을 실수로 &amp;ldquo;iss-133&amp;rdquo; 브랜치로 push 하는 어이없는 실수를 했을때 &amp;ldquo;iss-133&amp;rdquo;에 push 된 내용을 이전으로 되돌려 놓아야 한다.
git log로 이전 commit의 id를 확인한다. (ex, d50fd96d2d7e5e5cf689b0943f2b2d20d4c2dda4)
[iss-133] $ git reset --hard d50fd96d2d7e5e5cf689b0943f2b2d20d4c2dda4  이제 변경된 내용을 push 한다.
[iss-13] $ git push --force origin prj  </description>
    </item>
    
    <item>
      <title>RabbitMQ 스터디(with go)</title>
      <link>https://shrinklabs.com/posts/rabbitmqwithgo/</link>
      <pubDate>Wed, 19 Apr 2017 23:43:52 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/rabbitmqwithgo/</guid>
      <description>Go언어로 RabbitMQ를 어떻게 이용할 수 있는지 스터디하는 내용들을 대충 대충 정리하는 중&amp;hellip;
RabbitMQ라는게 뭐지? AMQP를 구현한 메세지 브로커
여기 저기에 있는 클라이언트들(Producer/Consumer)이 메세지를 서로 주고 받을 수 있도록 해주는 그런거?
설치  RabbitMQ 설치
sudo apt-get install rabbitmq-server  관리 플러그인 설치
sudo rabbitmq-plugins enable rabbitmq_management sudo service rabbitmq-server restart  실행
service rabbitmq-server start  계정 등록(id:sabzil, pw:1234)
rabbimqctl add_user sabzil 1234  등록한 계정을 관리자 계정으로 변경</description>
    </item>
    
    <item>
      <title>GitHub 페이지에 Hugo 올리기</title>
      <link>https://shrinklabs.com/posts/hugo/</link>
      <pubDate>Thu, 13 Oct 2016 14:17:19 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/hugo/</guid>
      <description>Blogger에서 Hugo( http://gohugo.io )로 갈아타는 과정을 정리해 본다.
Hugo 를 설치한다 https://github.com/spf13/hugo/releases 에서 본인의 환경에 맞는걸 찾아서 설치한다.
Linux는 deb를 제공하고 있지만, Windows는 exe파일을 제공하고 있어서 환경변수(PATH)를 잡아주던가, 환경변수가 잡혀있는곳에 복사를 해준다.
(이름도 hugo.exe로 바꿔주는게 사용하기에 더 편리한것 같다.)
MAC은 안 써봐서 잘 모르겠다&amp;hellip;;;;
github에 저장소를 만든다 github에서 호스팅을 받아서 hugo를 사용하기 위해서는 2개의 저장소를 만들어야 한다.
hugo의 컨텐츠를 관리하기 위한 저장소가 필요하다.(ex: https://github.com/sabzil/blog)
그리고 컨텐츠를 보여주기 위한 github의 페이지 저장소(ex: https://github.</description>
    </item>
    
    <item>
      <title>tmux</title>
      <link>https://shrinklabs.com/posts/tmux/</link>
      <pubDate>Wed, 12 Oct 2016 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/tmux/</guid>
      <description>tmux 시작 $ tmux $ tmux new-session(or new) -s [세션 이름] -n [윈도우 이름]  tmux 종료 $ ctrl-d $ exit  tmux detach(현재 클라이언트) $ ctrl-b, d  tmux attach $ tmux attach -t [세션 이름]  window 생성 $ ctrl-b, c  window 리스트 $ ctrl-b, w  window 이동(현재의 이전(다음, 이전) $ ctrl-b, l(n, p)  window 종료 $ ctrl-b, &amp;amp;  window 이름 변경 $ ctrl-b, ,  pane 가로 나누기 $ ctrl-b, %  pane 세로 나누기 $ ctrl-b, &amp;quot;  pane 의 번호를 화면에 출력 $ ctrl-b, q  pane 크기 조절 $ ctrl-b, (ctrl + 방향키)  모든 pane의 크기 동일하게 만들기 $ ctrl-b alt-1 # 모든 vertical split 넓이를 동일하게 변경 $ ctrl-b alt-2 # 모든 horizontal split의 넓이를 동일하게 변경  pane 이동하기 $ ctrl-b, o  pane 이동하기 $ ctrl-b, 방향키 $ ctrl-b {(})  pane 삭제하기 $ ctrl-d  pane 화면 스크롤 모드 시작 $ ctrl-b, [  pane 화면 스크롤 모드 종료 $ q  입력되는 내용을 모든 pane에 동일하게 적용 $ ctrl-b : setw synchronize-panes  http://nodeqa.</description>
    </item>
    
    <item>
      <title>vi 팁</title>
      <link>https://shrinklabs.com/posts/vi/</link>
      <pubDate>Mon, 05 Sep 2016 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/vi/</guid>
      <description>현재 작업중인 파일의 경로와 이름 확인 현재 작업중인 파일의 경로 또는 이름이 궁금할 경우가 있다.
ctrl + g  또는
: f  80컬럼에 버티컬 라인 vi에서 80컬럼의 버티컬 라인을 생성하려면 다음과 같이 한다.
set colorcolumn=80  을 적용하면, 빨간색 라인이 생긴다.
파일 관리 NerdTree를 사용하지 않고 vi에서 파일과 디렉토리를 관리하는 방법
파일 네비게이션
 표준모드(ex: i, o, a 같은걸 입력해서 입력모드로 전환되기 전 상태)
 &amp;ldquo;e.&amp;rdquo; (설명: &amp;ldquo;.&amp;rdquo; 는 현재의 디렉토리)</description>
    </item>
    
    <item>
      <title>vim-go 기본 템플릿 비활성화</title>
      <link>https://shrinklabs.com/posts/vim-go/</link>
      <pubDate>Mon, 05 Sep 2016 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/vim-go/</guid>
      <description>vim-go가 언제부터인가 main.go 를 만들면 템플릿으로 fmt.Println(&amp;ldquo;vim-go&amp;rdquo;) 를 찍어주는 코드를 자동으로 생성해 주기 시작했다.
나는 아무것도 나오지 않기를 바랬는데, 이런게 나와서 매번 지우는 작업을 하는게 싫었다. 그래서 설정중에 go_template_autocreate 를 조절했다.
let g:go_template_autocreate = 0  와 같이 하면 이제 아무것도 없는 빈 화면이 나온다.
혹시라도 반복적으로 나오는게 좋은데 &amp;ldquo;vim-go&amp;rdquo;를 찍는게 아닌 특정한 코드가 필요하다면, &amp;ldquo;.vim/bundle/vim-go/templates/hello_world.go&amp;rdquo; 파일을 수정해도 된다. 또는 특정한 템플릿을 지정하고 싶다면, 다음과 같이,
let g:go_template_file = &amp;quot;hello_world.go&amp;quot;  로 해도 된다.</description>
    </item>
    
    <item>
      <title>ifconfig 사용</title>
      <link>https://shrinklabs.com/posts/ifconfig/</link>
      <pubDate>Thu, 21 Jul 2016 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/ifconfig/</guid>
      <description>임시로 사용할 개발환경을 만들기 위해서 ubuntu 이미지를 사용하는데,
ifconfig 명령이 동작하지 않아서 보니, net-tools가 온전하게 설치되었지가 않은것 같다.
$ apt-get install --reinstall net-tools  </description>
    </item>
    
    <item>
      <title>zsh(oh-my-zsh) 사용</title>
      <link>https://shrinklabs.com/posts/zsh/</link>
      <pubDate>Thu, 21 Apr 2016 14:39:36 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/zsh/</guid>
      <description>zsh 설치하고 기본 쉘 변경 $ sudo apt-get install zsh $ which zsh /usr/bin/zsh $ chsh -s /usr/bin/zsh  oh-my-zsh 설치 $ curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh  설정(개인 취향) .zshrc 의 ZSH_THEME를 minimal 로 변경</description>
    </item>
    
    <item>
      <title>terminator 사용</title>
      <link>https://shrinklabs.com/posts/terminator/</link>
      <pubDate>Thu, 21 Apr 2016 13:35:10 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/terminator/</guid>
      <description> 설치 $sudo apt-get install terminator  단축키 분할(수직): ctrl + shift + e 분할(수평): ctrl + shift + o 닫기(현재 창): ctrl + shift + w 닫기(전체): ctrl + shift + q 새 탭: ctrl + shift + t 분할된 화면간 이동: alt + 방향키  </description>
    </item>
    
    <item>
      <title>개발환경 설정</title>
      <link>https://shrinklabs.com/posts/setting/</link>
      <pubDate>Sat, 23 May 2015 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/setting/</guid>
      <description>업데이트 $ sudo apt-get update $ sudo apt-get install build-essential  vim 설치 $ sudo apt-get install vim  vim 8.0 $ sudo add-apt-repository ppa:jonathonf/vim $ sudo apt-get update  xclip 설치 $ sudo apt-get install xclip  wget 설치(사용이 필요한 경우에만 설치) $ sudo apt-get install wget  git 설치  git 설치와 설정
$ sudo apt-get install git $ git config –-global user.name “blah” $ git config –-global user.</description>
    </item>
    
    <item>
      <title>pkg-config 사용</title>
      <link>https://shrinklabs.com/posts/pkg-config/</link>
      <pubDate>Fri, 06 Mar 2015 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/posts/pkg-config/</guid>
      <description>Go언어를 사용하다보면 C로 만들어진 라이브러리를 사용하기 위해서 cgo가 필요할 때 가 있다. 라이브러리를 링크하고 하는 몇 가지 절차를 거치게 되는데, 이때 pkg-config라는걸 사용하면 편리하다.
pkg-config를 사용하면 컴파일하는데 필요한 라이브러리와 헤더정보를 Go코드상에서 동일한 경로로 제공해줄 수 있게 된다.
pkg-config가 설치되어 있지 않을 경우에는 다음과 같이 설치를 해준다.
$ sudo apt-get install pkg-config  이제 설치되어 있는 라이브러리 목록을 한번 보자.
$ pkg-config --list-all  현재 설치된 라이브러리들의 정보가 나오게 된다.
그런데 내가 원하는 라이브러리의 정보가 나타나지 않는다.</description>
    </item>
    
  </channel>
</rss>