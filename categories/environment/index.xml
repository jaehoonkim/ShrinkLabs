<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>environment on ShrinkLabs</title>
    <link>https://shrinklabs.com/categories/environment/</link>
    <description>Recent content in environment on ShrinkLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Oct 2022 13:13:36 +0900</lastBuildDate><atom:link href="https://shrinklabs.com/categories/environment/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jenkin 설치</title>
      <link>https://shrinklabs.com/post/jenkins_install/</link>
      <pubDate>Sun, 09 Oct 2022 13:13:36 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/jenkins_install/</guid>
      <description>Docker 설치  dnf update -y dnf config-manager &amp;ndash;add-repo https://download.docker.com/linux/centos/docker-ce.repo dnf install docker-ce &amp;ndash;allowerasing systemctl start docker systemctl enable docker systemctl status docker usermod -aG docker $USER  Docker Compose 설치  dnf install -y curl curl -L &amp;ldquo;https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-$(uname -s)-$(uname -m)&amp;rdquo; -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose docker-compose &amp;ndash;version  Jenkins 설치 mkdir ws cd ws vim docker-compose.yml  version:&amp;#39;3&amp;#39;services:jenkins:image:jenkins/jenkins:lts container_name:jenkins volumes:- /var/run/docker.sock:/var/run/docker.sock - /jenkins:/var/jenkins_home ports:- &amp;#34;8080:8080&amp;#34;privileged:trueuser:rootdocker-compose up -d docker ps -a docker-compose logs  .</description>
    </item>
    
    <item>
      <title>klevr_agent 빌드 후 Docker Image 만들기</title>
      <link>https://shrinklabs.com/post/tool_klevr-agent/</link>
      <pubDate>Wed, 24 Feb 2021 03:08:00 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_klevr-agent/</guid>
      <description>$ git clone git@github.com:jaehoonn/klevr.git $ cd klevr $ chmod +x ./build.sh $ ./build.sh $ cd cmd/klebr-agent/Dockerfile $ docker build -t jaehoon/klevr-agent:0.2.6 . $ docker login -u jaehoon -p {password} $ docker push jaehoon/klevr-agent:0.2.6    (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>local branch 삭제</title>
      <link>https://shrinklabs.com/post/git_delete-local-branch/</link>
      <pubDate>Fri, 19 Feb 2021 07:17:00 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/git_delete-local-branch/</guid>
      <description>로컬에서 관리하고 있는 branch iss5783을 삭제합니다.
$ git branch -d iss5783    (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>etcd 설정</title>
      <link>https://shrinklabs.com/post/tool_etcd-setting/</link>
      <pubDate>Mon, 08 Feb 2021 02:20:00 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_etcd-setting/</guid>
      <description>linux에서 etcd 클러스터 설정하기
How To Setup a etcd Cluster On Linux – Beginners Guide( https://devopscube.com/setup-etcd-cluster-linux/ ) 를 읽고해보는 요약입니다.
소개
etcd는,
 key-value 저장소 중 하나 입니다. raft 프로토콜을 사용합니다. rest/grpc를 이용합니다.  준비물
 3개의 linux 서버 각 서버의 호스트 이름 방화벽 개방(2380, 2379)  설정
etc-1: 10.128.0.2
etc-2: 10.128.0.4
etc-3: 10.128.0.3
으로 호스트 이름과 ip를 사용합니다. (ip는 각 상황에 맞춰서 사용합니다.)
각 서버 별로 1~6의 과정을 진행합니다.</description>
    </item>
    
    <item>
      <title>원격지의 branch 사용하기</title>
      <link>https://shrinklabs.com/post/git_remote-branch/</link>
      <pubDate>Mon, 01 Feb 2021 07:17:00 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/git_remote-branch/</guid>
      <description>github에 있는 branch를 로컬로 받아와서 작업하고 싶을때 할 수 있는 방법
원격지에 있는 branch 정보를 확인 할 수 있도록 업데이트 합니다.
$ git remote update 원격지의 branch 확인
$ git branch -r origin/HEAD -&amp;gt; origin/master origin/dev origin/tapping origin/master origin/9999 origin/release upstream/dev upstream/master upstream/8888 upstream/release branch들 중에서 &amp;ldquo;origin/9999&amp;quot;를 갖고 오고 싶습니다.
$ git checkout -t origin/9999    (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>upstream 설정</title>
      <link>https://shrinklabs.com/post/git_upstream/</link>
      <pubDate>Sun, 03 Jan 2021 03:29:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/git_upstream/</guid>
      <description>프로젝트 진행하는 과정에서 필요한 upstream 설정
해당 내용은 kubernetes의 GitHub Workflow 문서를 참고 했습니다. ( https://github.com/kubernetes/community/blob/master/contributors/guide/github-workflow.md )
  프로젝트를 https://github.com/kubernetes/kubernetes 에서 내 github 계정으로 Fork 합니다.
  Fork한 프로젝트를 내 로컬로 clone 합니다.
$ git clone git@github.com:{your-account}/kubernetes.git // 작업 디렉토리로 이동 $ cd kubernetes // 현재 브랜치를 확인합니다. $ git branch * master   upstream으로 사용할 remote를 추가 합니다. 최초 프로젝트를 추가 합니다.
$ git remote add upstream git@github.</description>
    </item>
    
    <item>
      <title>git push된 내용을 특정한 commit으로 되돌리기</title>
      <link>https://shrinklabs.com/post/git_reset/</link>
      <pubDate>Tue, 31 Jul 2018 10:09:41 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/git_reset/</guid>
      <description>&amp;ldquo;iss-123&amp;rdquo; 브랜치에서 작업하던 내용을 실수로 &amp;ldquo;iss-133&amp;rdquo; 브랜치로 push 하는 어이없는 실수를 했을때 &amp;ldquo;iss-133&amp;quot;에 push 된 내용을 이전으로 되돌려 놓아야 합니다.
git log로 이전 commit의 id를 확인합니다. (ex, d50fd96d2d7e5e5cf689b0943f2b2d20d4c2dda4)
[iss-133] $ git reset --hard d50fd96d2d7e5e5cf689b0943f2b2d20d4c2dda4 이제 변경된 내용을 push 합니다.
[iss-13] $ git push --force origin prj    (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>GitHub 페이지에 Hugo 올리기</title>
      <link>https://shrinklabs.com/post/tool_hugo/</link>
      <pubDate>Thu, 13 Oct 2016 14:17:19 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_hugo/</guid>
      <description>Blogger에서 Hugo( http://gohugo.io )로 갈아타는 과정을 정리해 봅니다.
Hugo 를 설치합니다 https://github.com/spf13/hugo/releases 에서 본인의 환경에 맞는걸 찾아서 설치합니다.
Linux는 deb를 제공하고 있지만, Windows는 exe파일을 제공하고 있어서 환경변수(PATH)를 잡아주던가, 환경변수가 잡혀있는곳에 복사를 해줍니다.
(이름도 hugo.exe로 바꿔주는게 사용하기에 더 편리한것 같습니다.)
MAC은 안 써봐서 잘 모르겠습니다.
github에 저장소를 만듭니다 github에서 호스팅을 받아서 hugo를 사용하기 위해서는 2개의 저장소를 만들어야 합니다.
hugo의 컨텐츠를 관리하기 위한 저장소가 필요합니다.(ex: https://github.com/jaehoonn/blog)
그리고 컨텐츠를 보여주기 위한 github의 페이지 저장소(ex: https://github.</description>
    </item>
    
    <item>
      <title>tmux 사용 팁</title>
      <link>https://shrinklabs.com/post/tool_tmux/</link>
      <pubDate>Wed, 12 Oct 2016 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_tmux/</guid>
      <description>tmux 시작 $ tmux $ tmux new-session(or new) -s [세션 이름] -n [윈도우 이름] tmux 종료 $ ctrl-d $ exit tmux detach(현재 클라이언트) $ ctrl-b, d tmux attach $ tmux attach -t [세션 이름] window 생성 $ ctrl-b, c window 리스트 $ ctrl-b, w window 이동(현재의 이전(다음, 이전) $ ctrl-b, l(n, p) window 종료 $ ctrl-b, &amp;amp; window 이름 변경 $ ctrl-b, , pane 가로 나누기 $ ctrl-b, % pane 세로 나누기 $ ctrl-b, &amp;quot; pane 의 번호를 화면에 출력 $ ctrl-b, q pane 크기 조절 $ ctrl-b, (ctrl + 방향키) 모든 pane의 크기 동일하게 만들기 $ ctrl-b alt-1 # 모든 vertical split 넓이를 동일하게 변경 $ ctrl-b alt-2 # 모든 horizontal split의 넓이를 동일하게 변경 pane 이동하기 $ ctrl-b, o pane 이동하기 $ ctrl-b, 방향키 $ ctrl-b {(}) pane 삭제하기 $ ctrl-d pane 화면 스크롤 모드 시작 $ ctrl-b, [ pane 화면 스크롤 모드 종료 $ q 입력되는 내용을 모든 pane에 동일하게 적용 $ ctrl-b : setw synchronize-panes http://nodeqa.</description>
    </item>
    
    <item>
      <title>vi 팁</title>
      <link>https://shrinklabs.com/post/tool_vi/</link>
      <pubDate>Mon, 05 Sep 2016 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_vi/</guid>
      <description>현재 작업중인 파일의 경로와 이름 확인 현재 작업중인 파일의 경로 또는 이름이 궁금할 경우가 있습니다.
ctrl + g 또는
: f 80컬럼에 버티컬 라인 vi에서 80컬럼의 버티컬 라인을 생성하려면 다음과 같이 합니다.
set colorcolumn=80 을 적용하면, 빨간색 라인이 생깁니다.
파일 관리 NerdTree를 사용하지 않고 vi에서 파일과 디렉토리를 관리하는 방법
파일 네비게이션
 표준모드(ex: i, o, a 같은걸 입력해서 입력모드로 전환되기 전 상태) &amp;ldquo;e.&amp;rdquo; (설명: &amp;ldquo;.&amp;rdquo; 는 현재의 디렉토리)  디렉토리 만들기</description>
    </item>
    
    <item>
      <title>vim-go 기본 템플릿 비활성화</title>
      <link>https://shrinklabs.com/post/go_vim-go/</link>
      <pubDate>Mon, 05 Sep 2016 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/go_vim-go/</guid>
      <description>vim-go가 언제부터인가 main.go 를 만들면 템플릿으로 fmt.Println(&amp;ldquo;vim-go&amp;rdquo;) 를 찍어주는 코드를 자동으로 생성해 주기 시작했습니다.
나는 아무것도 나오지 않기를 바랬는데, 이런게 나와서 매번 지우는 작업을 하는게 싫었습니다. 그래서 설정중에 go_template_autocreate 를 조절했습니다.
let g:go_template_autocreate = 0 와 같이 하면 이제 아무것도 없는 빈 화면이 나옵니다.
혹시라도 반복적으로 나오는게 좋은데 &amp;ldquo;vim-go&amp;quot;를 찍는게 아닌 특정한 코드가 필요하다면, &amp;ldquo;.vim/bundle/vim-go/templates/hello_world.go&amp;rdquo; 파일을 수정해도 됩니다. 또는 특정한 템플릿을 지정하고 싶다면, 다음과 같이,
let g:go_template_file = &amp;quot;hello_world.go&amp;quot; 로 해도 됩니다.</description>
    </item>
    
    <item>
      <title>ifconfig 사용</title>
      <link>https://shrinklabs.com/post/tool_ifconfig/</link>
      <pubDate>Thu, 21 Jul 2016 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_ifconfig/</guid>
      <description>임시로 사용할 개발환경을 만들기 위해서 ubuntu 이미지를 사용하는데,
ifconfig 명령이 동작하지 않아서 보니, net-tools가 온전하게 설치되었지가 않은것 같습니다.
$ apt-get install --reinstall net-tools    (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>VM 설정</title>
      <link>https://shrinklabs.com/post/tool_vm/</link>
      <pubDate>Thu, 21 Apr 2016 14:39:36 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_vm/</guid>
      <description>Labs 머신에서 사용할 vm을 생성할때 특이점
 vm 생성 Settings -&amp;gt; Network(Attached to: Bridged Adapter) Start(Network &amp;amp; Host Name)  Host Name: 지정 Ethernet(enp0s3): On Configure - IPv4 Settings  Method: Manual Addresses: Labs-Network guide 문서의 subnetmask, dns, gateway 그리고 사용할 ip 참조 Require IPv4 addressing for this connection to complete 항목 선택         (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>zsh(oh-my-zsh) 사용</title>
      <link>https://shrinklabs.com/post/tool_zsh/</link>
      <pubDate>Thu, 21 Apr 2016 14:39:36 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_zsh/</guid>
      <description>zsh 설치하고 기본 쉘 변경 $ sudo apt-get install zsh $ which zsh /usr/bin/zsh $ chsh -s /usr/bin/zsh oh-my-zsh 설치 $ curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh 설정(개인 취향) .zshrc 의 ZSH_THEME를 minimal 로 변경
   (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>protobuf 사용</title>
      <link>https://shrinklabs.com/post/tool_protobuf/</link>
      <pubDate>Thu, 21 Apr 2016 13:35:10 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_protobuf/</guid>
      <description>설치  protoc 최신 버전 확인 ( https://github.com/google/protobuf/releases )  $ curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.15.6/protoc-3.15.6-linux-x86_64.zip $ unzip protoc-3.6.1-linux-x86\_64.zip -d protoc3 $ sudo mv protoc3/bin/\* /usr/local/bin/ $ sudo mv protoc3/include/\* /usr/local/include/ $ sudo chown $USER /usr/local/bin/protoc $ sudo chown -R $USER /usr/local/include/google 원본: Install protobuf 3.6.1 on Ubuntu 16.04 (github.com)
   (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>terminator 사용</title>
      <link>https://shrinklabs.com/post/tool_terminator/</link>
      <pubDate>Thu, 21 Apr 2016 13:35:10 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_terminator/</guid>
      <description>설치 $sudo apt-get install terminator 단축키 분할(수직): ctrl + shift + e 분할(수평): ctrl + shift + o 닫기(현재 창): ctrl + shift + w 닫기(전체): ctrl + shift + q 새 탭: ctrl + shift + t 분할된 화면간 이동: alt + 방향키    (adsbygoogle = window.adsbygoogle || []).push({});  </description>
    </item>
    
    <item>
      <title>개발환경 설정</title>
      <link>https://shrinklabs.com/post/tool_setting/</link>
      <pubDate>Sat, 23 May 2015 01:28:09 +0900</pubDate>
      
      <guid>https://shrinklabs.com/post/tool_setting/</guid>
      <description>업데이트 $ sudo apt-get update $ sudo apt-get install build-essential vim 설치 $ sudo apt-get install vim vim 8.0 $ sudo add-apt-repository ppa:jonathonf/vim $ sudo apt-get update xclip 설치 $ sudo apt-get install xclip wget 설치(사용이 필요한 경우에만 설치) $ sudo apt-get install wget git 설치  git 설치와 설정  $ sudo apt-get install git $ git config –-global user.name “blah” $ git config –-global user.email “blah@blah.com” $ git config --global core.</description>
    </item>
    
  </channel>
</rss>
